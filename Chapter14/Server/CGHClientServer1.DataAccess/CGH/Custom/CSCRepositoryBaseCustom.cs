// <auto-generated> - Template:RepositoryBasePartialMethods, Version:2.0, Id:6420f92e-975b-4c40-b251-d0404c951a5f
using System;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using entCSC = CGHClientServer1.DB.Entities;
using CGHClientServer1.Repository.Interface;
using CodeGenHero.Repository;

namespace CGHClientServer1.Repository
{
	public abstract partial class CSCRepositoryBase : ICSCRepositoryCrud
	{

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_City(ref IQueryable<entCSC.City> qryItem, Guid cityId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 .Include(x => x.State).AsNoTracking();
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_City(ref entCSC.City dbItem, Guid cityId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CountryStateCityDbContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new Microsoft.EntityFrameworkCore.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_Country(ref IQueryable<entCSC.Country> qryItem, Guid countryId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 .Include(x => x.States).AsNoTracking();
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_Country(ref entCSC.Country dbItem, Guid countryId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CountryStateCityDbContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new Microsoft.EntityFrameworkCore.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_State(ref IQueryable<entCSC.State> qryItem, Guid stateId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 .Include(x => x.Cities).AsNoTracking()
				 .Include(x => x.Country).AsNoTracking();
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_State(ref entCSC.State dbItem, Guid stateId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CountryStateCityDbContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new Microsoft.EntityFrameworkCore.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }
	}
}


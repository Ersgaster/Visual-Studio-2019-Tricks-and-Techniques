// <auto-generated> - Template:APIBaseController, Version:2.0, Id:cab9bf26-c662-4d64-b50d-3d907694545a
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Web.Http.Routing;
using CGHClientServer1.Repository;
using CGHClientServer1.Repository.Interface;
using CodeGenHero.DataService;
using CodeGenHero.WebApi;

namespace CGHClientServer1.API.Controllers.CSC
{
	// 	[AutoInvalidateCacheOutput]
	[RoutePrefix("api/CSC")]
	public abstract partial class CSCBaseApiController : ApiController
	{
		private ICSCRepository _repository;
		private readonly TaskFactory _myTaskFactory = new TaskFactory(CancellationToken.None, TaskCreationOptions.None, TaskContinuationOptions.None, TaskScheduler.Default);

		public CSCBaseApiController(ILogger log, ICSCRepository repository)
		{
			_repository = repository;
			Log = log;
			RunCustomLogicAfterCtor();
		}

		protected ICSCRepository Repo { get { return _repository; } }

		/// <summary>
		///
		/// </summary>
		/// <remarks>
		/// Using ILoggingService here in place of Log4NetLoggingService.
		/// However, doing so causes the CallerMemberName and CallerFilePath attributes to return null.
		/// This is because those attributes are used by the compiler (not at runtime) to do their magic.
		/// Thus, by abstracting them in an interface the compiler cannot tell which methods are calling.
		/// </remarks>
		protected ILogger Log { get; set; }

		protected PageData BuildPaginationHeader(UrlHelper urlHelper, string routeName, int page, int totalCount, int pageSize, string sort)
		{   // calculate data for metadata
			var totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
			var prevLink = page > 1 ? urlHelper.Link(routeName,
				new
				{
					page = page - 1,
					pageSize = pageSize,
					sort = sort
				}) : "";
			var nextLink = page < totalPages ? urlHelper.Link(routeName,
				new
				{
					page = page + 1,
					pageSize = pageSize,
					sort = sort
				}) : "";

			return new PageData(currentPage: page, isSuccessStatusCode: true, nextPageLink: nextLink, pageSize: pageSize, previousPageLink: prevLink, totalCount: totalCount, totalPages: totalPages);
		}

		protected string GetClientIpAddress(HttpRequestMessage request = null)
		{
			request = request ?? base.Request;
			return request.GetClientIpAddress();
		}

		protected List<string> GetListByDelimiter(string fields, char delimiter = ',')
		{
			List<string> retVal = new List<string>();

			if (!string.IsNullOrEmpty(fields))
			{
				retVal = fields.ToLower().Split(delimiter).ToList();
			}

			return retVal;
		}

		protected string GetUrl(HttpRequestMessage request = null)
		{
			request = request ?? base.Request;
			return request?.RequestUri?.PathAndQuery;
		}

		protected bool OnActionExecuting(out HttpStatusCode httpStatusCode, out string message, [CallerMemberName] string methodName = null)
		{
			httpStatusCode = HttpStatusCode.OK;
			message = null;
			RunCustomLogicOnActionExecuting(ref httpStatusCode, ref message, methodName);
			return (httpStatusCode == HttpStatusCode.OK);
		}

		public TResult RunSync<TResult>(Func<Task<TResult>> func)
		{
			var cultureUi = CultureInfo.CurrentUICulture;
			var culture = CultureInfo.CurrentCulture;
			return _myTaskFactory.StartNew(() =>
			{
				Thread.CurrentThread.CurrentCulture = culture;
				Thread.CurrentThread.CurrentUICulture = cultureUi;
				return func();
			}).Unwrap().GetAwaiter().GetResult();
		}

		public void RunSync(Func<Task> func)
		{
			var cultureUi = CultureInfo.CurrentUICulture;
			var culture = CultureInfo.CurrentCulture;
			_myTaskFactory.StartNew(() =>
			{
				Thread.CurrentThread.CurrentCulture = culture;
				Thread.CurrentThread.CurrentUICulture = cultureUi;
				return func();
			}).Unwrap().GetAwaiter().GetResult();
		}

		partial void RunCustomLogicAfterCtor();

		partial void RunCustomLogicOnActionExecuting(ref HttpStatusCode httpStatusCode, ref string message, string methodName);

	}
}
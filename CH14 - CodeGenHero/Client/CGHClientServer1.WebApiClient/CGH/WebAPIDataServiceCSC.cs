// <auto-generated> - Template:WebApiDataService, Version:2.0, Id:003c0699-a7fb-4f60-ac64-530a2dbc7a25
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using CodeGenHero.DataService;
using CGHClientServer1.API.Client.Interface;
using xDTO = CGHClientServer1.DTO.CSC;
using Microsoft.Extensions.Logging;

namespace CGHClientServer1.API.Client
{
	public partial class WebApiDataServiceCSC : WebApiDataServiceBase, IWebApiDataServiceCSC
	{
		public WebApiDataServiceCSC(ILogger log, HttpClient httpClient) : base(log, httpClient, isServiceOnlineRelativeUrl: "CSC/APIStatus")
		{ }

		private WebApiDataServiceCSC() : base(log: null, httpclient: null)
		{ }


		#region GetAllPages

		public async Task<IList<xDTO.City>> GetAllPagesCitiesAsync(
			string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetCitiesAsync);
		}

		public async Task<IList<xDTO.Country>> GetAllPagesCountriesAsync(
			string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetCountriesAsync);
		}

		public async Task<IList<xDTO.State>> GetAllPagesStatesAsync(
			string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetStatesAsync);
		}

		#endregion GetAllPages



		#region GetOnePage

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.City>>>> GetCitiesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.City>>(Log, HttpClient, 
				$"CSC/Cities", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.City>>>> GetCitiesAsync(
			string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetCitiesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Country>>>> GetCountriesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.Country>>(Log, HttpClient, 
				$"CSC/Countries", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Country>>>> GetCountriesAsync(
			string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetCountriesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.State>>>> GetStatesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.State>>(Log, HttpClient, 
				$"CSC/States", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.State>>>> GetStatesAsync(
			string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetStatesAsync(pageDataRequest);
		}

		#endregion GetOnePage



		#region Get By PK

		public async Task<IHttpCallResultCGHT<xDTO.City>> GetCityAsync(Guid cityId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.City>(Log, HttpClient, $"CSC/Cities/{cityId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Country>> GetCountryAsync(Guid countryId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.Country>(Log, HttpClient, $"CSC/Countries/{countryId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.State>> GetStateAsync(Guid stateId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.State>(Log, HttpClient, $"CSC/States/{stateId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		#endregion Get By PK



		#region Create

			public async Task<IHttpCallResultCGHT<xDTO.City>> CreateCityAsync(xDTO.City item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.City>(
					Log, HttpClient,
					$"CSC/Cities/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Country>> CreateCountryAsync(xDTO.Country item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.Country>(
					Log, HttpClient,
					$"CSC/Countries/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.State>> CreateStateAsync(xDTO.State item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.State>(
					Log, HttpClient,
					$"CSC/States/", item);
				return retVal;
			}

		#endregion Create



		#region Update

			public async Task<IHttpCallResultCGHT<xDTO.City>> UpdateCityAsync(xDTO.City item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.City>(
					Log, HttpClient,
					$"CSC/Cities/{item.CityId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Country>> UpdateCountryAsync(xDTO.Country item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.Country>(
					Log, HttpClient,
					$"CSC/Countries/{item.CountryId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.State>> UpdateStateAsync(xDTO.State item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.State>(
					Log, HttpClient,
					$"CSC/States/{item.StateId}", item);
				return retVal;
			}

		#endregion Update



		#region Delete

		public async Task<IHttpCallResultCGHT<xDTO.City>> DeleteCityAsync(Guid cityId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.City>(Log, HttpClient, $"CSC/Cities/{cityId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Country>> DeleteCountryAsync(Guid countryId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.Country>(Log, HttpClient, $"CSC/Countries/{countryId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.State>> DeleteStateAsync(Guid stateId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.State>(Log, HttpClient, $"CSC/States/{stateId}");
			return retVal;
		}

		#endregion Delete


	}
}

// <auto-generated> - Template:RepositoryBase, Version:2.0, Id:4ecca302-133e-48bc-bda9-5f495b9fdd26
using System;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using System.Threading.Tasks;
using CGHClientServer1.DB.Entities;
using CGHClientServer1.Repository.Interface;
using CodeGenHero.Repository;
using cghEnums = CodeGenHero.Repository.Enums;

namespace CGHClientServer1.Repository
{
	public abstract partial class CSCRepositoryBase : ICSCRepositoryCrud
	{
		protected CountryStateCityDbContext DbContext { get; set; }

		public CSCRepositoryBase(CountryStateCityDbContext ctx)
		{
			DbContext = ctx;

			// Disable lazy loading - if not, related properties are auto-loaded when
			// they are accessed for the first time, which means they'll be included when
			// we serialize (b/c the serialization process accesses those properties).

			// We don't want that, so we turn it off.  We want to eagerly load them (using Include) manually.

			// ctx.Configuration.LazyLoadingEnabled = false;

			// if (System.Diagnostics.Debugger.IsAttached)
			// {   // Write EF queries to the output console.
				// ctx.Database.Log = x => System.Diagnostics.Debug.WriteLine(x);
			// }
		}

		#region Generic Operations

		private async Task<IRepositoryActionResult<TEntity>> DeleteAsync<TEntity>(TEntity item) where TEntity : class
		{
			try
			{
				if (item == null)
				{
					return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.NotFound);
				}

				DbSet<TEntity> itemSet = DbContext.Set<TEntity>();
				itemSet.Remove(item);
				await DbContext.SaveChangesAsync();
				return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.Deleted);
			}
			catch(Exception ex)
			{
				return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.Error, ex);
			}
		}

		public IQueryable<TEntity> GetQueryable<TEntity>() where TEntity : class
		{
			return DbContext.Set<TEntity>();
		}

		public async Task<IRepositoryActionResult<TEntity>> InsertAsync<TEntity>(TEntity item) where TEntity : class
		{
			try
			{
				DbSet<TEntity> itemSet = DbContext.Set<TEntity>();
				itemSet.Add(item);
				var result = await DbContext.SaveChangesAsync();
				RunCustomLogicAfterEveryInsert<TEntity>(item, result);

				if (result > 0)
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.Created);
				}
				else
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.NothingModified, null);
				}
			}
			catch(Exception ex)
			{
				return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.Error, ex);
			}
		}

		private async Task<IRepositoryActionResult<TEntity>> UpdateAsync<TEntity>(TEntity item, TEntity existingItem) where TEntity : class
		{
			try
			{ // only update when a record already exists for this id
				if (existingItem == null)
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.NotFound);
				}

				// change the original entity status to detached; otherwise, we get an error on attach as the entity is already in the dbSet
				// set original entity state to detached
				DbContext.Entry(existingItem).State = EntityState.Detached;
				DbSet<TEntity> itemSet = DbContext.Set<TEntity>();
				itemSet.Attach(item); // attach & save
				DbContext.Entry(item).State = EntityState.Modified; // set the updated entity state to modified, so it gets updated.

				var result = await DbContext.SaveChangesAsync();
				RunCustomLogicAfterEveryUpdate<TEntity>(newItem: item, oldItem: existingItem, numObjectsWritten: result);

				if (result > 0)
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.Updated);
				}
				else
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.NothingModified, null);
				}
			}
			catch (Exception ex)
			{
				return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.Error, ex);
			}
		}

		partial void RunCustomLogicAfterEveryInsert<T>(T item, int numObjectsWritten) where T : class;

		partial void RunCustomLogicAfterEveryUpdate<T>(T newItem, T oldItem, int numObjectsWritten) where T : class;

		#endregion Generic Operations

		#region City

		public async Task<IRepositoryActionResult<City>> InsertAsync(City item)
		{
			var result = await InsertAsync<City>(item);
			RunCustomLogicAfterInsert_City(item, result);

			return result;
		}


		public IQueryable<City> GetQueryable_City()
		{
			return DbContext.Set<City>();
		}

			public async Task<City> Get_CityAsync(Guid cityId, int numChildLevels)
			{
				var qryItem = GetQueryable_City().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_City(ref qryItem, cityId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.CityId == cityId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_City(ref dbItem, cityId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<City> GetFirstOrDefaultAsync(City item)
			{
				return await DbContext.Cities.Where(x => x.CityId == item.CityId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<City>> UpdateAsync(City item)
		{
			var oldItem = await DbContext.Cities.FirstOrDefaultAsync(x => x.CityId == item.CityId);
			var result = await UpdateAsync<City>(item, oldItem);
			RunCustomLogicAfterUpdate_City(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<City>> Delete_CityAsync(Guid cityId)
			{
				return await DeleteAsync<City>(DbContext.Cities.Where(x => x.CityId == cityId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<City>> DeleteAsync(City item)
			{
				return await DeleteAsync<City>(DbContext.Cities.Where(x => x.CityId == item.CityId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_City(City item, IRepositoryActionResult<City> result);

		partial void RunCustomLogicAfterUpdate_City(City newItem, City oldItem, IRepositoryActionResult<City> result);

		partial void RunCustomLogicOnGetQueryableByPK_City(ref IQueryable<City> qryItem, Guid cityId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_City(ref City dbItem, Guid cityId, int numChildLevels);



		#endregion City

		#region Country

		public async Task<IRepositoryActionResult<Country>> InsertAsync(Country item)
		{
			var result = await InsertAsync<Country>(item);
			RunCustomLogicAfterInsert_Country(item, result);

			return result;
		}


		public IQueryable<Country> GetQueryable_Country()
		{
			return DbContext.Set<Country>();
		}

			public async Task<Country> Get_CountryAsync(Guid countryId, int numChildLevels)
			{
				var qryItem = GetQueryable_Country().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_Country(ref qryItem, countryId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.CountryId == countryId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_Country(ref dbItem, countryId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<Country> GetFirstOrDefaultAsync(Country item)
			{
				return await DbContext.Countries.Where(x => x.CountryId == item.CountryId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<Country>> UpdateAsync(Country item)
		{
			var oldItem = await DbContext.Countries.FirstOrDefaultAsync(x => x.CountryId == item.CountryId);
			var result = await UpdateAsync<Country>(item, oldItem);
			RunCustomLogicAfterUpdate_Country(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<Country>> Delete_CountryAsync(Guid countryId)
			{
				return await DeleteAsync<Country>(DbContext.Countries.Where(x => x.CountryId == countryId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<Country>> DeleteAsync(Country item)
			{
				return await DeleteAsync<Country>(DbContext.Countries.Where(x => x.CountryId == item.CountryId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_Country(Country item, IRepositoryActionResult<Country> result);

		partial void RunCustomLogicAfterUpdate_Country(Country newItem, Country oldItem, IRepositoryActionResult<Country> result);

		partial void RunCustomLogicOnGetQueryableByPK_Country(ref IQueryable<Country> qryItem, Guid countryId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_Country(ref Country dbItem, Guid countryId, int numChildLevels);



		#endregion Country

		#region State

		public async Task<IRepositoryActionResult<State>> InsertAsync(State item)
		{
			var result = await InsertAsync<State>(item);
			RunCustomLogicAfterInsert_State(item, result);

			return result;
		}


		public IQueryable<State> GetQueryable_State()
		{
			return DbContext.Set<State>();
		}

			public async Task<State> Get_StateAsync(Guid stateId, int numChildLevels)
			{
				var qryItem = GetQueryable_State().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_State(ref qryItem, stateId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.StateId == stateId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_State(ref dbItem, stateId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<State> GetFirstOrDefaultAsync(State item)
			{
				return await DbContext.States.Where(x => x.StateId == item.StateId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<State>> UpdateAsync(State item)
		{
			var oldItem = await DbContext.States.FirstOrDefaultAsync(x => x.StateId == item.StateId);
			var result = await UpdateAsync<State>(item, oldItem);
			RunCustomLogicAfterUpdate_State(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<State>> Delete_StateAsync(Guid stateId)
			{
				return await DeleteAsync<State>(DbContext.States.Where(x => x.StateId == stateId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<State>> DeleteAsync(State item)
			{
				return await DeleteAsync<State>(DbContext.States.Where(x => x.StateId == item.StateId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_State(State item, IRepositoryActionResult<State> result);

		partial void RunCustomLogicAfterUpdate_State(State newItem, State oldItem, IRepositoryActionResult<State> result);

		partial void RunCustomLogicOnGetQueryableByPK_State(ref IQueryable<State> qryItem, Guid stateId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_State(ref State dbItem, Guid stateId, int numChildLevels);



		#endregion State

	}
}
